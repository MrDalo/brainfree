User.controller:
	CreateUser:
	-treba osetrit rucne kodom, aby polia fomrulara kde sa registruje boli vyplnene. Nasledne treba rucne skontrolovat, ci sa hesla zhoduju (ak u vas uzivatel zadava heslo a potom overenie hesla)
	-Ak uzivatel v databaze existuje, server vam vrati response so statusom 200, kde request.responseText = "UserExists", nasledne treba uzivatelovi dat cez nejaku errorovu message vediet, ze dany uzivatel uz existuje a je potrebne si zvolit ine uzivatelske meno
	-Ak sa uzivatel zaregistruje spravne, server vrati datovu strukturu, ktora obsahuje login, email a heslo usera	

	Logging:
	-pri requeste na loginCheck musite rucne osetrit, aby user nezadal prazdne polia logovacieho formuaru.
	-Ak user s danym loginom neexistuje, server vrati response so statusom 200 a request.responseText = "notFound"
	-Ak user zada dobre meno ale zle heslo, tak server vrati response so statusom 200 a request.responseText = "incorrectPassword"
	- ak sa uzivatel spravne naloguje, server vrati {token: userName}, kde userName je premenna, ktora obsahuje login usera




Task.controller:
Ak createTask tak tam musi byt zadany datum inak naskoci error.
Treba nakodit osetrene uz existujuceho tasku - asi netreba, prideli sa potreben ID k danemu tasku

Metoda Find:
	-ak sa naloguje user, ktory nema ziadne tasky, tak metoda find vrati v responseText hlasku "NotFound"
	-ak ma user nejake tasky, tak vrati JSON naplneny tymito taskami
Metoda createTask:
	-Tu musi byt od uzivatela zadany datum, inak nastava error v databaze, takze treba vyzadovat od usera datum a task Name
	- ostatne veci vyzadovat nemusime, tasku sa vytvori specialne ID, s ktorym budeme neskor narabat

ƒço sa tyka ostatnych metod pri taskoch, tak tie som este nedoplnil. Pokusim sa ich doplnit dnes do vecera(nedela 28.11.2021)